**NOTE** Sometimes you have to list the environment variables for netlify dev to see the functions.

- If the Rust functions don't build on netlify dev (or don't auto build on change) or you can't validate via strava, try running ~netlify env:list~ to load up the netlify environment variables including
enabling Rust.

* Heart Rate Drift / Decoupling calculator
This is simple calculator meant to be used with a Stava download for calculating your Heart Rate Drift, also known as heart rate decoupling. This is a pretty simple calculation, but is only available with Training Peaks premium edition. This had been available on a free website, but I can no longer find it. So I wrote my own. For details on the test, see the index.html.

** Using the app
Currently this has a command line app but the web based version is in development.

*** Start With Strava Data

To get the Strava data you need API access. https://developers.strava.com/docs/getting-started/ has directions, where the key thing you'll need to do is create an app and get a client id. 

Once you have a client id one make a browser request with this URL:

https://www.strava.com/oauth/authorize?client_id=<CLIENT_ID>&response_type=code&redirect_uri=http://localhost/<DOESNT_REALLY_MATTER>&approval_prompt=force&scope=activity:read

Authorize Strava and approve the authorization. This will redirect back to the browser, which will fail (cause you aren't running a server). Pull the code off of the redirect url, it's the field ~code~.

That's not enough. Now that you have a ~code~ you have to exchange it for an access token. You can do that through Postman. Run a Post request to get the token with something like this:

https://www.strava.com/oauth/token?client_id=<CLIENT_ID>&grant_type=authorization_code&client_secret=<SECRET>&code=<CODE>

That sends you JSON that looks like this:

#+BEGIN_SRC json
    {
      "token_type": "Bearer",
      "expires_at": 1672721958,
      "expires_in": 21600,
      "refresh_token": "<TOKEN>",
      "access_token": "<ACCESS_TOKEN>",
      "athlete": {
      }
  }
#+END_SRC

Now you can use the access_token in further requests. Here's an example from my AeT test:

https://www.strava.com/api/v3/activities/7944016770/streams?keys=heartrate,time&key_by_type=true

You need to have the Authorization header with "Bearer <ACCESS_TOKEN>" to get valid data.

Now save that response to a file. This is the file you'll use to run the command line app.

*** The Web Version

The web version uses ~trunk~ and can be started with ~trunk serve~. 

This uses Auth0 as it's backend so I didn't have to develop a webserver. A key part of it is that Auth0 needs to be configured with a way to fetch the user profile. That is configured with this:

#+BEGIN_SRC javascript
function(accessToken, ctx, cb) {
    const profile = {};
    
  	request.get(
    {
      url: "https://www.strava.com/api/v3/athlete",
      headers: {
        'Authorization': 'Bearer ' + accessToken,
      }
    },
    (err, resp, body) => {
      if (err) {
        return cb(err);
      }
      if (resp.statusCode !== 200) {
        return cb(new Error(body));
      }
      let bodyParsed;
      try {
        bodyParsed = JSON.parse(body);
      } catch (jsonError) {
        return cb(new Error(body));
      }
      const profile = {
        user_id: bodyParsed.id
      };
      cb(null, profile);
    }
  );
  }
#+END_SRC

That gets the user id from Strava and allows Auth0 to authenticate.

** Netlify Deployment

After much experimentation it appears I can get this all to work via GitHub + Netlify and Netlify functions. The architecture (which is way more complicated than I'd like but cest la vie) is:
- Source on GitHub, GitHub actions deploy to Netlify.
- Initial authentication goes through Auth0 and uses OAuth
- If authentication succeeds we call the Auth0 API, which proxies to a Netlify function with the full ID Token
- After validating the token the Netlify function calls a function to get the full user data
- Assuming a strava access-token is present, it calls the Strava API with that token and returns the value
- At this point you could move out of using WebAssembly and just put this on the server, but I'd rather not. 


